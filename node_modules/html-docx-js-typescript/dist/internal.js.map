{"version":3,"file":"internal.js","sourceRoot":"","sources":["../src/internal.ts"],"names":[],"mappings":";;;;AACA,iCAAwC;AACxC,mCAAoE;AACpE,yCAA+E;AAC/E,mDAA2C;AAI3C,IAAM,sBAAsB,GAAG;IAC7B,WAAW,EAAE,UAAoB;IACjC,OAAO,EAAE,EAAsB;CAChC,CAAA;AAED,SAAS,YAAY,CAAI,OAAU,EAAE,KAAiB;IACpD,OAAO,sCAAK,OAAO,GAAK,KAAK,CAAO,CAAA;AACtC,CAAC;AAED,SAAsB,gBAAgB,CAAC,GAAU;;;;;wBAChC,qBAAM,GAAG,CAAC,aAAa,CAAC,EAAE,IAAI,EAAE,aAAa,EAAE,CAAC,EAAA;;oBAAzD,MAAM,GAAG,SAAgD;oBAC/D,IAAI,2BAAS,EAAE;wBACb,sBAAO,IAAI,IAAI,CAAC,CAAC,MAAM,CAAC,EAAE;gCACxB,IAAI,EAAE,yEAAyE;6BAChF,CAAC,EAAA;qBACH;yBAAM;wBACL,sBAAO,IAAI,MAAM,CAAC,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC,EAAA;qBAC1C;;;;;CACF;AATD,4CASC;AAED,SAAS,aAAa,CAAC,GAAW;IAChC,OAAO,2BAAS,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,CAAA;AAC/D,CAAC;AAED,SAAS,kBAAkB,CAAC,eAAgC;IAClD,IAAA,WAAW,GAAc,eAAe,YAA7B,EAAE,OAAO,GAAK,eAAe,QAApB,CAAoB;IAChD,IAAM,cAAc,GAAG,YAAY,CAAC,0BAAc,EAAE,OAAO,CAAC,CAAA;IAC5D,IAAI,KAAK,GAAG,CAAC,CAAA;IACb,IAAI,MAAM,GAAG,CAAC,CAAA;IACd,IAAI,WAAW,KAAK,WAAW,EAAE;QAC/B,MAAM,GAAG,KAAK,CAAA;QACd,KAAK,GAAG,KAAK,CAAA;KACd;SAAM;QACL,KAAK,GAAG,KAAK,CAAA;QACb,MAAM,GAAG,KAAK,CAAA;KACf;IACD,OAAO,4BAAgB,CAAC,KAAK,EAAE,MAAM,EAAE,WAAW,EAAE,cAAc,CAAC,CAAA;AACrE,CAAC;AAED,SAAgB,QAAQ,CAAC,GAAU,EAAE,UAAkB,EAAE,OAAiC;IACxF,IAAM,eAAe,GAAG,YAAY,CAAC,sBAAsB,EAAE,OAAO,CAAC,CAAA;IACrE,GAAG,CAAC,IAAI,CAAC,qBAAqB,EAAE,aAAa,CAAC,wBAAe,CAAC,EAAE;QAC9D,aAAa,EAAE,KAAK;KACrB,CAAC,CAAA;IACF,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,aAAa,CAAC,gBAAO,CAAC,EAAE,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,CAAA;IACnF,OAAO,GAAG;SACP,MAAM,CAAC,MAAM,CAAC;SACd,IAAI,CAAC,cAAc,EAAE,kBAAkB,CAAC,eAAe,CAAC,EAAE;QACzD,aAAa,EAAE,KAAK;KACrB,CAAC;SACD,IAAI,CAAC,aAAa,EAAE,sBAAc,CAAC,UAAU,CAAC,EAAE;QAC/C,aAAa,EAAE,KAAK;KACrB,CAAC;SACD,MAAM,CAAC,OAAO,CAAC;SACf,IAAI,CAAC,mBAAmB,EAAE,aAAa,CAAC,wBAAe,CAAC,EAAE;QACzD,aAAa,EAAE,KAAK;KACrB,CAAC,CAAA;AACN,CAAC;AAlBD,4BAkBC","sourcesContent":["import JSZip = require('jszip')\nimport { getMHTdocument } from './utils'\nimport { contentTypesXml, documentXmlRels, relsXml } from './assets'\nimport { documentTemplate, Orient, Margins, defaultMargins } from './templates'\nimport { isBrowser } from 'browser-or-node'\n\nexport type DocumentOptions = typeof defaultDocumentOptions\n\nconst defaultDocumentOptions = {\n  orientation: 'portrait' as Orient,\n  margins: {} as Partial<Margins>,\n}\n\nfunction mergeOptions<T>(options: T, patch: Partial<T>) {\n  return { ...options, ...patch } as T\n}\n\nexport async function generateDocument(zip: JSZip) {\n  const buffer = await zip.generateAsync({ type: 'arraybuffer' })\n  if (isBrowser) {\n    return new Blob([buffer], {\n      type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    })\n  } else {\n    return new Buffer(new Uint8Array(buffer))\n  }\n}\n\nfunction getBinaryData(str: string) {\n  return isBrowser ? new Blob([str]) : new Buffer(str, 'utf-8')\n}\n\nfunction renderDocumentFile(documentOptions: DocumentOptions) {\n  const { orientation, margins } = documentOptions\n  const marginsOptions = mergeOptions(defaultMargins, margins)\n  let width = 0\n  let height = 0\n  if (orientation === 'landscape') {\n    height = 12240\n    width = 15840\n  } else {\n    width = 12240\n    height = 15840\n  }\n  return documentTemplate(width, height, orientation, marginsOptions)\n}\n\nexport function addFiles(zip: JSZip, htmlSource: string, options: Partial<DocumentOptions>) {\n  const documentOptions = mergeOptions(defaultDocumentOptions, options)\n  zip.file('[Content_Types].xml', getBinaryData(contentTypesXml), {\n    createFolders: false,\n  })\n  zip.folder('_rels').file('.rels', getBinaryData(relsXml), { createFolders: false })\n  return zip\n    .folder('word')\n    .file('document.xml', renderDocumentFile(documentOptions), {\n      createFolders: false,\n    })\n    .file('afchunk.mht', getMHTdocument(htmlSource), {\n      createFolders: false,\n    })\n    .folder('_rels')\n    .file('document.xml.rels', getBinaryData(documentXmlRels), {\n      createFolders: false,\n    })\n}\n"]}